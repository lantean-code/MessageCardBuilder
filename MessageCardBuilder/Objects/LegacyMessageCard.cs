using System;
using System.Collections.Generic;

namespace MessageCard.Builder.Objects
{
    /// <summary>
    /// <a href="https://docs.microsoft.com/en-us/outlook/actionable-messages/message-card-reference#card-fields">https://docs.microsoft.com/en-us/outlook/actionable-messages/message-card-reference#card-fields</a>
    /// </summary>
    public class LegacyMessageCard
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LegacyMessageCard"/> class.
        /// </summary>
        /// <param name="title">The title property is meant to be rendered in a prominent way, at the very top of the card.</param>
        /// <param name="text">Required if the card does not contain a summary property, otherwise optional. The text property is meant to be displayed in a normal font below the card's title. Use it to display content, such as the description of the entity being referenced, or an abstract of a news article.</param>
        /// <param name="summary">Required if the card does not contain a text property, otherwise optional. The summary property is typically displayed in the list view in Outlook, as a way to quickly determine what the card is all about.</param>
        /// <param name="correlationId">The correlationId property simplifies the process of locating logs for troubleshooting issues. We recommend that when sending an actionable card, your service should set and log a unique UUID in this property.</param>
        /// <param name="expectedActors">Optional. This contains a list of expected email addresses of the recipient for the action endpoint.</param>
        /// <param name="originator">Required when sent via email, not applicable when sent via connector. For actionable email, MUST be set to the provider ID generated by the <a href="https://docs.microsoft.com/en-us/outlook/actionable-messages/email-dev-dashboard">Actionable Email Developer Dashboard</a>.</param>
        /// <param name="themeColor">Specifies a custom brand color for the card.</param>
        /// <param name="hideOriginalBody">When set to true, causes the HTML body of the message to be hidden.</param>
        /// <param name="sections">A collection of sections to include in the card.</param>
        /// <param name="actions">A collection of actions that can be invoked on this card.</param>
        public LegacyMessageCard(
            string? title = null,
            string? text = null,
            string? summary = null,
            Guid? correlationId = null,
            IEnumerable<string>? expectedActors = null,
            string? originator = null,
            string? themeColor = null,
            bool? hideOriginalBody = null,
            IEnumerable<Section>? sections = null,
            IEnumerable<IAction>? actions = null)
        {
            Title = title;
            Text = text;
            Summary = summary;
            CorrelationId = correlationId;
            ExpectedActors = expectedActors;
            Originator = originator;
            ThemeColor = themeColor;
            HideOriginalBody = hideOriginalBody;
            Sections = sections;
            Actions = actions;
        }

        /// <summary>
        /// Required. Must be set to MessageCard.
        /// </summary>
#if NEWTONSOFTJSON || DEBUG
        [Newtonsoft.Json.JsonProperty("@type")]
#elif SYSTEMTEXTJSON|| DEBUG
        [System.Text.Json.Serialization.JsonPropertyName("@type")]
#endif
        public string Type { get; } = "MessageCard";

        /// <summary>
        /// Required. Must be set to https://schema.org/extensions.
        /// </summary>
#if NEWTONSOFTJSON || DEBUG
        [Newtonsoft.Json.JsonProperty("@context")]
#elif SYSTEMTEXTJSON|| DEBUG
        [System.Text.Json.Serialization.JsonPropertyName("@context")]
#endif
        public string Context { get; } = "http://schema.org/extensions";

        /// <summary>
        /// The correlationId property simplifies the process of locating logs for troubleshooting issues. We recommend that when sending an actionable card, your service should set and log a unique UUID in this property.
        /// </summary>
#if NEWTONSOFTJSON || DEBUG
        [Newtonsoft.Json.JsonProperty("correlationId")]
#elif SYSTEMTEXTJSON|| DEBUG
        [System.Text.Json.Serialization.JsonPropertyName("correlationId")]
#endif
        public Guid? CorrelationId { get; }

        /// <summary>
        /// Optional. This contains a list of expected email addresses of the recipient for the action endpoint.
        /// </summary>
#if NEWTONSOFTJSON || DEBUG
        [Newtonsoft.Json.JsonProperty("expectedActors")]
#elif SYSTEMTEXTJSON|| DEBUG
        [System.Text.Json.Serialization.JsonPropertyName("expectedActors")]
#endif
        public IEnumerable<string>? ExpectedActors { get; }

        /// <summary>
        /// Required when sent via email, not applicable when sent via connector. For actionable email, MUST be set to the provider ID generated by the <a href="https://docs.microsoft.com/en-us/outlook/actionable-messages/email-dev-dashboard">Actionable Email Developer Dashboard</a>.
        /// </summary>
#if NEWTONSOFTJSON || DEBUG
        [Newtonsoft.Json.JsonProperty("originator")]
#elif SYSTEMTEXTJSON|| DEBUG
        [System.Text.Json.Serialization.JsonPropertyName("originator")]
#endif
        public string? Originator { get; }

        /// <summary>
        /// Required if the card does not contain a text property, otherwise optional. The summary property is typically displayed in the list view in Outlook, as a way to quickly determine what the card is all about.
        /// </summary>
#if NEWTONSOFTJSON || DEBUG
        [Newtonsoft.Json.JsonProperty("summary")]
#elif SYSTEMTEXTJSON|| DEBUG
        [System.Text.Json.Serialization.JsonPropertyName("summary")]
#endif
        public string? Summary { get; }

        /// <summary>
        /// Specifies a custom brand color for the card. The color will be displayed in a non-obtrusive manner.
        /// </summary>
#if NEWTONSOFTJSON || DEBUG
        [Newtonsoft.Json.JsonProperty("themeColor")]
#elif SYSTEMTEXTJSON|| DEBUG
        [System.Text.Json.Serialization.JsonPropertyName("themeColor")]
#endif
        public string? ThemeColor { get; }

        /// <summary>
        /// When set to true, causes the HTML body of the message to be hidden. This is very useful in scenarios where the card is a better or more useful representation of the content than the HTML body itself, which is especially true when the card contains actions (see below.)
        /// </summary>
#if NEWTONSOFTJSON || DEBUG
        [Newtonsoft.Json.JsonProperty("hideOriginalBody")]
#elif SYSTEMTEXTJSON|| DEBUG
        [System.Text.Json.Serialization.JsonPropertyName("hideOriginalBody")]
#endif
        public bool? HideOriginalBody { get; }

        /// <summary>
        /// The title property is meant to be rendered in a prominent way, at the very top of the card. Use it to introduce the content of the card in such a way users will immediately know what to expect.
        /// </summary>
#if NEWTONSOFTJSON || DEBUG
        [Newtonsoft.Json.JsonProperty("title")]
#elif SYSTEMTEXTJSON|| DEBUG
        [System.Text.Json.Serialization.JsonPropertyName("title")]
#endif
        public string? Title { get; }

        /// <summary>
        /// Required if the card does not contain a summary property, otherwise optional. The text property is meant to be displayed in a normal font below the card's title. Use it to display content, such as the description of the entity being referenced, or an abstract of a news article.
        /// </summary>
#if NEWTONSOFTJSON || DEBUG
        [Newtonsoft.Json.JsonProperty("text")]
#elif SYSTEMTEXTJSON|| DEBUG
        [System.Text.Json.Serialization.JsonPropertyName("text")]
#endif
        public string? Text { get; }

        /// <summary>
        /// A collection of sections to include in the card.
        /// </summary>
#if NEWTONSOFTJSON || DEBUG
        [Newtonsoft.Json.JsonProperty("sections")]
#elif SYSTEMTEXTJSON|| DEBUG
        [System.Text.Json.Serialization.JsonPropertyName("sections")]
#endif
        public IEnumerable<Section>? Sections { get; }

        /// <summary>
        /// A collection of actions that can be invoked on this card.
        /// </summary>
#if NEWTONSOFTJSON || DEBUG
        [Newtonsoft.Json.JsonProperty("potentialAction")]
#elif SYSTEMTEXTJSON|| DEBUG
        [System.Text.Json.Serialization.JsonPropertyName("potentialAction")]
#endif
        public IEnumerable<IAction>? Actions { get; }
    }
}